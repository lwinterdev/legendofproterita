[gd_scene load_steps=8 format=2]

[ext_resource path="res://item1.png" type="Texture" id=1]
[ext_resource path="res://LightingShader.shader" type="Shader" id=2]

[sub_resource type="ShaderMaterial" id=1]
resource_local_to_scene = true
shader = ExtResource( 2 )
shader_param/lightning_color = Color( 0.992157, 0.992157, 0.992157, 1 )
shader_param/size = 0.098
shader_param/width = 0.402
shader_param/speed = 0.294
shader_param/cycle = 2.055
shader_param/ratio = 0.19
shader_param/time_shift = null

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec2 frame_coords = vec2(0.0,0.0);
uniform vec2 nb_frames = vec2(0.0,0.0);
uniform vec2 velocity = vec2(0.0,0.0);
uniform float velocity_max = 300.0;
uniform float trail_size = 6.0;
uniform float alpha_start = 0.8;
uniform float alpha_tail = 0.2;
uniform float alpha_factor = 1.2;
uniform float noise_margin = 0.68;
uniform sampler2D noise;


vec2 get_mid_uv(vec2 coords, vec2 px_size) {
	// récupérer les UV des milieux de ces px en partant du dernier
	float px_mid_x = 1.0 - px_size.x / 2.0;
	float px_mid_y = 1.0 - px_size.y / 2.0;
	if (coords.x < 1.0)
		px_mid_x = px_size.x * ( floor(coords.x / px_size.x) + 1.0 / 2.0 );
	if (coords.y < 1.0)
		px_mid_y = px_size.y * ( floor(coords.y / px_size.y) + 1.0 / 2.0 ); 
	return vec2(px_mid_x, px_mid_y);
}

void fragment() {
	COLOR = texture(TEXTURE,UV);

	float UV_X = (UV.x * nb_frames.x - frame_coords.x);
	float UV_Y = (UV.y * nb_frames.y - frame_coords.y);
	vec2 uv = vec2(UV_X, UV_Y);
	
	// Limite velocity à trail_size pixels max 
	vec2 v_dir = normalize(velocity);
	float v_length = length(velocity) * trail_size / velocity_max;
	
	float alpha_step = (alpha_start - alpha_tail) / trail_size;
	float alpha = alpha_tail;
	while (v_length > 0.0) {
		vec2 velo = v_length * v_dir * TEXTURE_PIXEL_SIZE;
		vec2 px_mid_uv = get_mid_uv(UV, TEXTURE_PIXEL_SIZE) + velo;
		float noiseValue = texture(noise, px_mid_uv).r;
		vec4 new_color = texture(TEXTURE, px_mid_uv);
		if (noiseValue > noise_margin && new_color.a > 0.0) {
			if (COLOR.a == 0.0) {
				COLOR = new_color;
				COLOR.a = new_color.a * alpha;
			}
			break;
		}
		v_length -= 0.5;
		alpha *= alpha_factor;
		alpha = min(alpha,alpha_start);
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 5 )
shader_param/frame_coords = Vector2( 0, 0 )
shader_param/nb_frames = Vector2( 0, 0 )
shader_param/velocity = Vector2( 0, 0 )
shader_param/velocity_max = 300.0
shader_param/trail_size = 6.0
shader_param/alpha_start = 0.8
shader_param/alpha_tail = 0.2
shader_param/alpha_factor = 1.2
shader_param/noise_margin = 0.68

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float size : hint_range(0.0, 6.0);
uniform float width : hint_range(0.0, 6.0);

uniform float screen_width;
uniform float screen_height;

uniform sampler2D noise_tex;

uniform vec4 brighter_color : hint_color = vec4(1.0, 0.8, 0.0, 1.0);
uniform vec4 middle_color : hint_color  = vec4(1.0, 0.56, 0.0, 1.0);
uniform vec4 darker_color : hint_color  = vec4(0.64, 0.2, 0.05, 1.0);

uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform vec2 player_position;
uniform int pixel_amount = 40;

void fragment() {
	vec2 grid_uv = round(UV * float(pixel_amount)) / float(pixel_amount);
	
	float ratio = screen_width / screen_height;
	float dist = distance(player_position, vec2(mix(0.5, grid_uv.x, ratio), grid_uv.y));
	
	float noise_value = texture(noise_tex, dist + vec2(0.0, TIME)).x;
	// The .yx swizzle is when using the built in horizontal gradient texture. If you have a vertical gradient texture remove .yx
	float gradient_value=1.0;
	
	gradient_value -= smoothstep(spread, spread + 0.5, length(dist + vec2(-.5)) / spread);
	
	float step1 = step(noise_value, gradient_value);
	float step2 = step(noise_value, gradient_value - 0.2);
	float step3 = step(noise_value, gradient_value - 0.4);
	
	vec3 bd_color = mix(brighter_color.rgb, darker_color.rgb, step1 - step2);
	
	vec4 color = vec4(bd_color, step1);
	color.rgb = mix(color.rgb, middle_color.rgb, step2 - step3);
	COLOR = color;
	COLOR.a = 0.0;

	float d = dist;
	float h = size * 0.5;
	float l = h - (width * 0.5);
	if (d <= h && d > l) {

		COLOR.a = color.a;
		COLOR.rgb = color.rgb;
	}
	
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/size = 4.345
shader_param/width = 0.843
shader_param/screen_width = 400.0
shader_param/screen_height = 200.0
shader_param/brighter_color = Color( 1, 0.8, 0, 1 )
shader_param/middle_color = Color( 1, 0.56, 0, 1 )
shader_param/darker_color = Color( 0.64, 0.2, 0.05, 1 )
shader_param/spread = 0.5
shader_param/player_position = null
shader_param/pixel_amount = 40

[node name="LIghtning" type="Sprite"]
modulate = Color( 0.352941, 0.521569, 0.760784, 1 )
self_modulate = Color( 1, 1, 1, 0.309804 )
show_behind_parent = true
material = SubResource( 1 )
position = Vector2( 46.3085, 147.977 )
scale = Vector2( 3.89428, 10.2485 )
texture = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 24.3977, 0.195596 )
texture = ExtResource( 1 )

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -16.0
margin_top = -16.0
margin_right = -16.0
margin_bottom = -16.0
texture = ExtResource( 1 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}
